version: 2.1

orbs:
  slack: circleci/slack@4.10.1

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
            aws s3 rm s3://udapeople-<< parameters.WORKFLOW_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>

  awscli:
    description: Install awscli for jobs that need to execute aws commands and not found on its used images.
    steps:
      - run:
          name: awscli
          command: |
            apt update
            apt upgrade
            apt install curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 ));
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           fi

jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run format
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run format
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end unit tests
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit tests
          command: |
            cd backend
            npm install
            npm test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan/analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=crtical --force
            npm audit --audit-level=critical


  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan/analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=crtical --force
            npm audit fix --audit-level=crtical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: cicd


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --stack-name "UdaPeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --stack-name "UdaPeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory
            cat .circleci/ansible/inventory
      - run:
          name: Install tar, gzip
          command: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: cicd

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # - awscli
      - add_ssh_keys:
          fingerprints: ["55:a2:d5:58:77:81:3e:49:2b:97:49:a0:c0:7d:93:cd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # - awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt 
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/WxouXX1QcwP4pWs75UUT6v/migrations_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - destroy-environment
      # - revert-migrations

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-udapeople
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: slack-udapeople
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]